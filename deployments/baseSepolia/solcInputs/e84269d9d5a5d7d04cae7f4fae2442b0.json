{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ConfirmedOwnerWithProposal} from \"./ConfirmedOwnerWithProposal.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    // solhint-disable-next-line gas-custom-errors\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /// @notice Allows an owner to begin transferring ownership to a new address.\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /// @notice Allows an ownership transfer to be completed by the recipient.\n  function acceptOwnership() external override {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /// @notice Get the current owner\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /// @notice validate, transfer ownership, and emit relevant events\n  function _transferOwnership(address to) private {\n    // solhint-disable-next-line gas-custom-errors\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /// @notice validate access\n  function _validateOwnership() internal view {\n    // solhint-disable-next-line gas-custom-errors\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /// @notice Reverts if called by anyone other than the contract owner.\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {VRFV2PlusClient} from \"../libraries/VRFV2PlusClient.sol\";\nimport {IVRFSubscriptionV2Plus} from \"./IVRFSubscriptionV2Plus.sol\";\n\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\n  /**\n   * @notice Request a set of random words.\n   * @param req - a struct containing following fields for randomness request:\n   * keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * requestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * extraArgs - abi-encoded extra args\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\n/// @notice method required to be implemented by all V2Plus consumers.\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\ninterface IVRFMigratableConsumerV2Plus {\n  event CoordinatorSet(address vrfCoordinator);\n\n  /// @notice Sets the VRF Coordinator address\n  /// @notice This method should only be callable by the coordinator or contract owner\n  function setCoordinator(address vrfCoordinator) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\n/// @notice related methods implemented by the V2Plus coordinator.\ninterface IVRFSubscriptionV2Plus {\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint256 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint256 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint256 subId, address to) external;\n\n  /**\n   * @notice Accept subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\n   * @dev  to send Native with the call, for example:\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\n   */\n  function createSubscription() external returns (uint256 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return nativeBalance - native balance of the subscription in wei.\n   * @return reqCount - Requests count of subscription.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint256 subId\n  )\n    external\n    view\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint256 subId) external view returns (bool);\n\n  /**\n   * @notice Paginate through all active VRF subscriptions.\n   * @param startIndex index of the subscription to start from\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\n   */\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\n\n  /**\n   * @notice Fund a subscription with native.\n   * @param subId - ID of the subscription\n   * @notice This method expects msg.value to be greater than or equal to 0.\n   */\n  function fundSubscriptionWithNative(uint256 subId) external payable;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// End consumer library.\nlibrary VRFV2PlusClient {\n  // extraArgs will evolve to support new features\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\"VRF ExtraArgsV1\"));\n  struct ExtraArgsV1 {\n    bool nativePayment;\n  }\n\n  struct RandomWordsRequest {\n    bytes32 keyHash;\n    uint256 subId;\n    uint16 requestConfirmations;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n    bytes extraArgs;\n  }\n\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {IVRFCoordinatorV2Plus} from \"./interfaces/IVRFCoordinatorV2Plus.sol\";\nimport {IVRFMigratableConsumerV2Plus} from \"./interfaces/IVRFMigratableConsumerV2Plus.sol\";\nimport {ConfirmedOwner} from \"../../shared/access/ConfirmedOwner.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords, extraArgs),\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\n *\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\n  error ZeroAddress();\n\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\n  // so that coordinator reference is updated after migration\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\n    if (_vrfCoordinator == address(0)) {\n      revert ZeroAddress();\n    }\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\n    if (msg.sender != address(s_vrfCoordinator)) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n\n  /**\n   * @inheritdoc IVRFMigratableConsumerV2Plus\n   */\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\n    if (_vrfCoordinator == address(0)) {\n      revert ZeroAddress();\n    }\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\n\n    emit CoordinatorSet(_vrfCoordinator);\n  }\n\n  modifier onlyOwnerOrCoordinator() {\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\n    }\n    _;\n  }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Tanda.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ninterface ITandaManager {\r\n    function requestRandomnessForTanda(uint256 tandaId) external;\r\n    function getUsdcAddress() external view returns (address);\r\n    function isTandaActive(uint256 tandaId) external view returns (bool);\r\n}\r\n\r\ncontract Tanda is ReentrancyGuard {\r\n    using SafeERC20 for IERC20;\r\n\r\n    enum TandaState {\r\n        OPEN,\r\n        ACTIVE,\r\n        COMPLETED\r\n    }\r\n\r\n    struct Participant {\r\n        address payable addr;\r\n        bool hasPaid;\r\n        uint256 paidUntilCycle;\r\n        bool isActive;\r\n        uint256 payoutOrder;\r\n        uint256 joinTimestamp;\r\n    }\r\n\r\n    uint256 public constant PENALTY_RATE = 15; // 15% penalty for late payments\r\n    uint256 public immutable tandaId;\r\n    uint256 public immutable contributionAmount;\r\n    uint256 public immutable payoutInterval; // in seconds\r\n    uint256 public immutable gracePeriod; // in seconds\r\n    uint16 public immutable participantCount;\r\n    ITandaManager public immutable manager;\r\n    IERC20 public immutable usdcToken;\r\n    address public immutable creator;\r\n\r\n    TandaState public state;\r\n    uint256 public startTimestamp;\r\n    uint256 public currentCycle;\r\n    uint256 public totalFunds;\r\n    Participant[] public participants;\r\n    mapping(address => uint256) public addressToParticipantIndex;\r\n\r\n    bool public payoutOrderAssigned;\r\n    uint256[] public payoutOrder;\r\n\r\n    event ParticipantJoined(address indexed participant, uint256 timestamp);\r\n    event PaymentMade(\r\n        address indexed participant,\r\n        uint256 cyclesPaid,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n    event PayoutSent(\r\n        address indexed recipient,\r\n        uint256 amount,\r\n        uint256 cycle,\r\n        uint256 timestamp\r\n    );\r\n    event GracePeriodEntered(\r\n        address indexed participant,\r\n        uint256 cycle,\r\n        uint256 timestamp\r\n    );\r\n    event ParticipantRemoved(\r\n        address indexed participant,\r\n        uint256 cycle,\r\n        uint256 timestamp\r\n    );\r\n    event TandaStarted(uint256 startTimestamp, uint256 initialCycle);\r\n    event PayoutOrderAssigned(uint256[] order, uint256 timestamp);\r\n    event TandaCompleted(uint256 completionTimestamp);\r\n    event TandaRestarted(uint256 restartTimestamp);\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == address(manager), \"Caller is not manager\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCreator() {\r\n        require(msg.sender == address(creator), \"Caller is not creator\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyParticipant() {\r\n        require(isParticipant(msg.sender), \"Caller is not participant\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyActiveTanda() {\r\n        require(state == TandaState.ACTIVE, \"Tanda is not active\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOpenTanda() {\r\n        require(state == TandaState.OPEN, \"Tanda is not open\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyCompletedTanda() {\r\n        require(state == TandaState.COMPLETED, \"Tanda is not completed\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _tandaId,\r\n        uint256 _contributionAmount,\r\n        uint256 _payoutInterval,\r\n        uint16 _participantCount,\r\n        uint256 _gracePeriod,\r\n        address _manager,\r\n        address _creator\r\n    ) {\r\n        require(_contributionAmount > 0, \"Contribution amount must be > 0\");\r\n        require(_payoutInterval > 0, \"Payout interval must be > 0\");\r\n        require(_participantCount >= 2, \"Minimum 2 participants required\");\r\n        require(_gracePeriod > 0, \"Grace period must be > 0\");\r\n        require(_manager != address(0), \"Invalid manager address\");\r\n        require(_creator != address(0), \"Invalid creator address\");\r\n\r\n        tandaId = _tandaId;\r\n        contributionAmount = _contributionAmount;\r\n        payoutInterval = _payoutInterval;\r\n        participantCount = _participantCount;\r\n        gracePeriod = _gracePeriod;\r\n        manager = ITandaManager(_manager);\r\n        usdcToken = IERC20(manager.getUsdcAddress());\r\n        state = TandaState.OPEN;\r\n        creator = _creator;\r\n    }\r\n\r\n    /**\r\n     * @notice Join the Tanda by contributing USDC\r\n     * @dev Transfers USDC from participant to contract\r\n     */\r\n    function join() external onlyOpenTanda {\r\n        require(participants.length < participantCount, \"Tanda is full\");\r\n        require(!isParticipant(msg.sender), \"Already joined this tanda\");\r\n\r\n        // Transfer USDC from participant to contract\r\n        usdcToken.safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            contributionAmount\r\n        );\r\n\r\n        participants.push(\r\n            Participant({\r\n                addr: payable(msg.sender),\r\n                hasPaid: true,\r\n                paidUntilCycle: 1,\r\n                isActive: true,\r\n                payoutOrder: 0,\r\n                joinTimestamp: block.timestamp\r\n            })\r\n        );\r\n        addressToParticipantIndex[msg.sender] = participants.length;\r\n        totalFunds += contributionAmount;\r\n\r\n        emit ParticipantJoined(msg.sender, block.timestamp);\r\n\r\n        if (participants.length == participantCount) {\r\n            _startTanda();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Make payment for future cycles\r\n     * @param cyclesToPay Number of cycles to pay for\r\n     */\r\n    function makePayment(\r\n        uint256 cyclesToPay\r\n    ) external onlyParticipant onlyActiveTanda {\r\n        require(state == TandaState.ACTIVE, \"Tanda is not active\");\r\n        require(cyclesToPay > 0, \"Must pay for at least 1 cycle\");\r\n\r\n        uint256 participantIndex = addressToParticipantIndex[msg.sender] - 1;\r\n        Participant storage participant = participants[participantIndex];\r\n\r\n        require(participant.isActive, \"Participant is inactive\");\r\n\r\n        // Calculate maximum cycles that can be paid for without overpaying\r\n        uint256 maxCyclesCanPay = participantCount -\r\n            participant.paidUntilCycle +\r\n            1;\r\n        require(\r\n            cyclesToPay <= maxCyclesCanPay,\r\n            \"Cannot pay beyond total cycles\"\r\n        );\r\n\r\n        uint256 totalPayment = contributionAmount * cyclesToPay;\r\n        usdcToken.safeTransferFrom(msg.sender, address(this), totalPayment);\r\n\r\n        participant.paidUntilCycle += cyclesToPay;\r\n        participant.hasPaid = true;\r\n        totalFunds += totalPayment;\r\n\r\n        emit PaymentMade(\r\n            msg.sender,\r\n            cyclesToPay,\r\n            totalPayment,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Trigger payout for current cycle\r\n     * @dev Can be called by anyone when conditions are met\r\n     */\r\n    function triggerPayout() external nonReentrant onlyActiveTanda {\r\n        require(\r\n            block.timestamp >= startTimestamp + (currentCycle * payoutInterval),\r\n            \"Current cycle not completed\"\r\n        );\r\n        require(_allParticipantsPaid(), \"Not all participants have paid\");\r\n        require(payoutOrderAssigned, \"Payout order not assigned\");\r\n\r\n        uint256 payoutIndex = currentCycle % participantCount;\r\n        address payable recipient = participants[payoutOrder[payoutIndex]].addr;\r\n        uint256 payoutAmount = contributionAmount * participantCount;\r\n\r\n        require(\r\n            usdcToken.balanceOf(address(this)) >= payoutAmount,\r\n            \"Insufficient contract balance\"\r\n        );\r\n        currentCycle++;\r\n        totalFunds -= payoutAmount;\r\n\r\n        usdcToken.safeTransfer(recipient, payoutAmount);\r\n\r\n        emit PayoutSent(\r\n            recipient,\r\n            payoutAmount,\r\n            currentCycle - 1,\r\n            block.timestamp\r\n        );\r\n\r\n        if (currentCycle >= participantCount) {\r\n            state = TandaState.COMPLETED;\r\n            emit TandaCompleted(block.timestamp);\r\n        }\r\n    }\r\n\r\n    // ==================== Manager Functions ====================\r\n\r\n    function enterGracePeriod(\r\n        address participant\r\n    ) external onlyCreator onlyActiveTanda {\r\n        uint256 participantIndex = addressToParticipantIndex[participant] - 1;\r\n        require(participantIndex < participants.length, \"Invalid participant\");\r\n\r\n        Participant storage p = participants[participantIndex];\r\n        require(p.isActive, \"Participant is inactive\");\r\n        require(\r\n            !p.hasPaid && p.paidUntilCycle <= currentCycle,\r\n            \"Participant not in default\"\r\n        );\r\n\r\n        emit GracePeriodEntered(participant, currentCycle, block.timestamp);\r\n    }\r\n\r\n    function removeDefaultedParticipant(\r\n        address participant\r\n    ) external onlyCreator onlyActiveTanda {\r\n        uint256 participantIndex = addressToParticipantIndex[participant] - 1;\r\n        require(participantIndex < participants.length, \"Invalid participant\");\r\n\r\n        Participant storage p = participants[participantIndex];\r\n        require(p.isActive, \"Participant is inactive\");\r\n        require(\r\n            !p.hasPaid && p.paidUntilCycle <= currentCycle,\r\n            \"Participant not in default\"\r\n        );\r\n\r\n        p.isActive = false;\r\n        emit ParticipantRemoved(participant, currentCycle, block.timestamp);\r\n    }\r\n\r\n    function assignPayoutOrder(uint256 randomSeed) external onlyManager {\r\n        require(!payoutOrderAssigned, \"Payout order already assigned\");\r\n        require(\r\n            participants.length == participantCount,\r\n            \"Not all participants joined\"\r\n        );\r\n\r\n        payoutOrder = new uint256[](participantCount);\r\n\r\n        // Initialize with sequential order\r\n        for (uint256 i = 0; i < participantCount; i++) {\r\n            payoutOrder[i] = i;\r\n        }\r\n\r\n        // Fisher-Yates shuffle\r\n        for (uint256 i = participantCount - 1; i > 0; i--) {\r\n            uint256 j = uint256(keccak256(abi.encode(randomSeed, i))) % (i + 1);\r\n            (payoutOrder[i], payoutOrder[j]) = (payoutOrder[j], payoutOrder[i]);\r\n        }\r\n\r\n        payoutOrderAssigned = true;\r\n        emit PayoutOrderAssigned(payoutOrder, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Restart the tanda after completion\r\n     * @dev Can only be called by manager after tanda is completed\r\n     */\r\n    function restartTanda() external onlyCreator onlyCompletedTanda {\r\n        // Reset state\r\n        state = TandaState.OPEN;\r\n        startTimestamp = 0;\r\n        currentCycle = 0;\r\n        totalFunds = 0;\r\n        payoutOrderAssigned = false;\r\n        delete payoutOrder;\r\n\r\n        // Reset participants\r\n        for (uint256 i = 0; i < participants.length; i++) {\r\n            participants[i].hasPaid = false;\r\n            participants[i].paidUntilCycle = 0;\r\n            participants[i].isActive = true;\r\n            participants[i].payoutOrder = 0;\r\n        }\r\n\r\n        emit TandaRestarted(block.timestamp);\r\n    }\r\n\r\n    // ==================== Internal Functions ====================\r\n\r\n    function _startTanda() private {\r\n        state = TandaState.ACTIVE;\r\n        startTimestamp = block.timestamp;\r\n        currentCycle = 1;\r\n\r\n        emit TandaStarted(startTimestamp, currentCycle);\r\n        manager.requestRandomnessForTanda(tandaId);\r\n    }\r\n\r\n    function _allParticipantsPaid() private view returns (bool) {\r\n        for (uint256 i = 0; i < participants.length; i++) {\r\n            if (\r\n                participants[i].isActive &&\r\n                (participants[i].paidUntilCycle <= currentCycle ||\r\n                    !participants[i].hasPaid)\r\n            ) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // ==================== View Functions ====================\r\n\r\n    /**\r\n     * @notice Check if address is a participant\r\n     * @param _address Address to check\r\n     * @return True if participant, false otherwise\r\n     */\r\n    function isParticipant(address _address) public view returns (bool) {\r\n        return addressToParticipantIndex[_address] != 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Get participant details by address\r\n     * @param _address Participant address\r\n     * @return Participant struct\r\n     */\r\n    function getParticipant(\r\n        address _address\r\n    ) external view returns (Participant memory) {\r\n        require(isParticipant(_address), \"Address is not participant\");\r\n        return participants[addressToParticipantIndex[_address] - 1];\r\n    }\r\n\r\n    /**\r\n     * @notice Get all participants\r\n     * @return Array of Participant structs\r\n     */\r\n    function getAllParticipants() external view returns (Participant[] memory) {\r\n        return participants;\r\n    }\r\n\r\n    /**\r\n     * @notice Get current cycle details\r\n     * @return cycleNumber Current cycle number\r\n     * @return payoutAddress Address to receive next payout\r\n     * @return payoutAmount Amount to be paid out\r\n     */\r\n    function getCurrentCycleInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 cycleNumber,\r\n            address payoutAddress,\r\n            uint256 payoutAmount\r\n        )\r\n    {\r\n        cycleNumber = currentCycle;\r\n        if (payoutOrderAssigned && participants.length > 0) {\r\n            uint256 payoutIndex = currentCycle % participantCount;\r\n            payoutAddress = participants[payoutOrder[payoutIndex]].addr;\r\n            payoutAmount = contributionAmount * participantCount;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Get Tanda summary information\r\n     * @return state Current Tanda state\r\n     * @return currentCycle Current cycle number\r\n     * @return participantsCount Number of participants\r\n     * @return totalFunds Total USDC in contract\r\n     * @return nextPayoutTimestamp Timestamp of next payout\r\n     */\r\n    function getTandaSummary()\r\n        external\r\n        view\r\n        returns (\r\n            TandaState state,\r\n            uint256 currentCycle,\r\n            uint256 participantsCount,\r\n            uint256 totalFunds,\r\n            uint256 nextPayoutTimestamp\r\n        )\r\n    {\r\n        state = state;\r\n        currentCycle = currentCycle;\r\n        participantsCount = participants.length;\r\n        totalFunds = totalFunds;\r\n        nextPayoutTimestamp = state == TandaState.ACTIVE\r\n            ? startTimestamp + (currentCycle * payoutInterval)\r\n            : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if participant is in good standing\r\n     * @param _address Participant address\r\n     * @return True if paid up, false otherwise\r\n     */\r\n    function isParticipantInGoodStanding(\r\n        address _address\r\n    ) external view returns (bool) {\r\n        if (!isParticipant(_address)) return false;\r\n        Participant memory p = participants[\r\n            addressToParticipantIndex[_address] - 1\r\n        ];\r\n        return p.isActive && p.hasPaid && p.paidUntilCycle > currentCycle;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the payout order array\r\n     * @dev Only returns data if payoutOrderAssigned is true\r\n     * @return Array of participant indices in payout order\r\n     */\r\n    function getPayoutOrder() external view returns (uint256[] memory) {\r\n        require(payoutOrderAssigned, \"Payout order not assigned\");\r\n        return payoutOrder;\r\n    }\r\n}\r\n"
    },
    "contracts/TandaManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"./Tanda.sol\";\r\n\r\nimport {VRFConsumerBaseV2Plus} from \"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\";\r\nimport {VRFV2PlusClient} from \"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\";\r\n\r\nstruct GeneralInfo {\r\n    uint256 tandaId;\r\n    uint256 contributionAmount;\r\n    uint256 payoutInterval;\r\n    uint16 participantCount;\r\n    uint256 gracePeriod;\r\n    address creator;\r\n    address usdcTokenAddress;\r\n    address managerAddress;\r\n    address tandaAddress;\r\n}\r\n\r\nstruct CurrentStatus {\r\n    Tanda.TandaState state;\r\n    uint256 currentCycle;\r\n    uint256 totalParticipants;\r\n    uint256 totalFunds;\r\n    uint256 nextPayoutTimestamp;\r\n    uint256 startTimestamp;\r\n    bool payoutOrderAssigned;\r\n    bool isActive;\r\n    bool isOpen;\r\n    bool isCompleted;\r\n}\r\n\r\ncontract TandaManager is VRFConsumerBaseV2Plus {\r\n    uint256 private subscriptionId;\r\n    bytes32 private gasLane;\r\n    uint32 private callbackGasLimit;\r\n    uint16 private requestConfirmations = 3;\r\n    uint32 private numWords = 1;\r\n    bool private nativePayment = true;\r\n\r\n    address public immutable usdcAddress;\r\n    uint256 public nextTandaId;\r\n\r\n    mapping(uint256 => address) public tandaIdToAddress;\r\n    mapping(uint256 => uint256) public vrfRequestIdToTandaId;\r\n    mapping(uint256 => bool) public activeTandas;\r\n\r\n    event TandaCreated(\r\n        uint256 indexed tandaId,\r\n        address indexed tandaAddress,\r\n        uint256 contributionAmount,\r\n        uint256 payoutInterval,\r\n        uint16 participantCount,\r\n        uint256 gracePeriod,\r\n        address creator\r\n    );\r\n    event RandomnessRequested(\r\n        uint256 indexed tandaId,\r\n        uint256 indexed requestId\r\n    );\r\n    event PayoutOrderAssigned(uint256 indexed tandaId);\r\n    event VRFConfigUpdated(\r\n        uint256 newSubscriptionId,\r\n        bytes32 newGasLane,\r\n        uint32 newCallbackGasLimit,\r\n        uint16 newRequestConfirmations,\r\n        uint32 newNumWords,\r\n        bool newNativePayment\r\n    );\r\n\r\n    constructor(\r\n        address _vrfCoordinator,\r\n        uint256 _subscriptionId,\r\n        bytes32 _gasLane,\r\n        uint32 _callbackGasLimit,\r\n        address _usdcAddress\r\n    ) VRFConsumerBaseV2Plus(_vrfCoordinator) {\r\n        require(_vrfCoordinator != address(0), \"Invalid VRF coordinator\");\r\n        require(_usdcAddress != address(0), \"Invalid USDC address\");\r\n\r\n        subscriptionId = _subscriptionId;\r\n        gasLane = _gasLane;\r\n        callbackGasLimit = _callbackGasLimit;\r\n        usdcAddress = _usdcAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Update VRF configuration parameters\r\n     * @param _subscriptionId New subscription ID\r\n     * @param _gasLane New gas lane key hash\r\n     * @param _callbackGasLimit New callback gas limit\r\n     * @param _requestConfirmations New number of request confirmations\r\n     * @param _numWords New number of random words to request\r\n     * @param _nativePayment Whether to pay for VRF in native token or LINK\r\n     */\r\n    function updateVRFConfig(\r\n        uint256 _subscriptionId,\r\n        bytes32 _gasLane,\r\n        uint32 _callbackGasLimit,\r\n        uint16 _requestConfirmations,\r\n        uint32 _numWords,\r\n        bool _nativePayment\r\n    ) external onlyOwner {\r\n        subscriptionId = _subscriptionId;\r\n        gasLane = _gasLane;\r\n        callbackGasLimit = _callbackGasLimit;\r\n        requestConfirmations = _requestConfirmations;\r\n        numWords = _numWords;\r\n        nativePayment = _nativePayment;\r\n\r\n        emit VRFConfigUpdated(\r\n            _subscriptionId,\r\n            _gasLane,\r\n            _callbackGasLimit,\r\n            _requestConfirmations,\r\n            _numWords,\r\n            _nativePayment\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Create a new Tanda\r\n     * @param _contributionAmount USDC amount each participant must contribute\r\n     * @param _payoutInterval Time between payouts in seconds\r\n     * @param _participantCount Number of participants needed\r\n     * @param _gracePeriod Grace period for late payments in seconds\r\n     * @return tandaId ID of the newly created Tanda\r\n     */\r\n    function createTanda(\r\n        uint256 _contributionAmount,\r\n        uint256 _payoutInterval,\r\n        uint16 _participantCount,\r\n        uint256 _gracePeriod\r\n    ) external returns (uint256) {\r\n        require(\r\n            _contributionAmount >= 10 * 10 ** 6,\r\n            \"Minimum contribution 10 USDC\"\r\n        ); // 10 USDC (6 decimals)\r\n        require(_payoutInterval >= 1 days, \"Minimum interval 1 day\");\r\n        require(_payoutInterval <= 30 days, \"Maximum interval 30 days\");\r\n        require(_participantCount >= 2, \"Minimum 2 participants\");\r\n        require(_participantCount <= 50, \"Maximum 50 participants\");\r\n        require(_gracePeriod >= 1 days, \"Minimum grace period 1 day\");\r\n        require(_gracePeriod <= 7 days, \"Maximum grace period 7 days\");\r\n\r\n        uint256 tandaId = nextTandaId++;\r\n        Tanda tanda = new Tanda(\r\n            tandaId,\r\n            _contributionAmount,\r\n            _payoutInterval,\r\n            _participantCount,\r\n            _gracePeriod,\r\n            address(this),\r\n            msg.sender\r\n        );\r\n\r\n        tandaIdToAddress[tandaId] = address(tanda);\r\n        activeTandas[tandaId] = true;\r\n\r\n        emit TandaCreated(\r\n            tandaId,\r\n            address(tanda),\r\n            _contributionAmount,\r\n            _payoutInterval,\r\n            _participantCount,\r\n            _gracePeriod,\r\n            msg.sender\r\n        );\r\n        return tandaId;\r\n    }\r\n\r\n    /**\r\n     * @notice Request randomness for payout order assignment\r\n     * @dev Only callable by Tanda contracts\r\n     * @param tandaId ID of the Tanda requesting randomness\r\n     */\r\n    function requestRandomnessForTanda(uint256 tandaId) external {\r\n        require(tandaIdToAddress[tandaId] == msg.sender, \"Caller is not Tanda\");\r\n        require(activeTandas[tandaId], \"Tanda is not active\");\r\n\r\n        uint256 requestId = s_vrfCoordinator.requestRandomWords(\r\n            VRFV2PlusClient.RandomWordsRequest({\r\n                keyHash: gasLane,\r\n                subId: subscriptionId,\r\n                requestConfirmations: requestConfirmations,\r\n                callbackGasLimit: callbackGasLimit,\r\n                numWords: numWords,\r\n                extraArgs: VRFV2PlusClient._argsToBytes(\r\n                    VRFV2PlusClient.ExtraArgsV1({nativePayment: nativePayment})\r\n                )\r\n            })\r\n        );\r\n\r\n        vrfRequestIdToTandaId[requestId] = tandaId;\r\n\r\n        emit RandomnessRequested(tandaId, requestId);\r\n    }\r\n\r\n    /**\r\n     * @notice Request randomness for payout order assignment (test function)\r\n     */\r\n    function requestRandomnessForTandaTest(\r\n        uint256 tandaId\r\n    ) public returns (uint256) {\r\n        require(activeTandas[tandaId], \"Tanda is not active\");\r\n\r\n        uint256 requestId = s_vrfCoordinator.requestRandomWords(\r\n            VRFV2PlusClient.RandomWordsRequest({\r\n                keyHash: gasLane,\r\n                subId: subscriptionId,\r\n                requestConfirmations: requestConfirmations,\r\n                callbackGasLimit: callbackGasLimit,\r\n                numWords: numWords,\r\n                extraArgs: VRFV2PlusClient._argsToBytes(\r\n                    VRFV2PlusClient.ExtraArgsV1({nativePayment: nativePayment})\r\n                )\r\n            })\r\n        );\r\n\r\n        vrfRequestIdToTandaId[requestId] = tandaId;\r\n\r\n        return requestId;\r\n    }\r\n\r\n    /**\r\n     * @notice Callback function used by VRF Coordinator\r\n     * @param requestId ID of the randomness request\r\n     * @param randomWords Array of random values\r\n     */\r\n    function fulfillRandomWords(\r\n        uint256 requestId,\r\n        uint256[] calldata randomWords\r\n    ) internal override {\r\n        uint256 tandaId = vrfRequestIdToTandaId[requestId];\r\n        require(tandaIdToAddress[tandaId] != address(0), \"Invalid Tanda ID\");\r\n\r\n        Tanda tanda = Tanda(tandaIdToAddress[tandaId]);\r\n        tanda.assignPayoutOrder(randomWords[0]);\r\n\r\n        emit PayoutOrderAssigned(tandaId);\r\n    }\r\n\r\n    // ==================== View Functions ====================\r\n\r\n    /**\r\n     * @notice Get USDC token address\r\n     * @return USDC contract address\r\n     */\r\n    function getUsdcAddress() external view returns (address) {\r\n        return usdcAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Check if Tanda is active\r\n     * @param tandaId ID of the Tanda to check\r\n     * @return True if active, false otherwise\r\n     */\r\n    function isTandaActive(uint256 tandaId) external view returns (bool) {\r\n        return activeTandas[tandaId];\r\n    }\r\n\r\n    /**\r\n     * @notice Get Tanda contract address by ID\r\n     * @param tandaId ID of the Tanda\r\n     * @return Tanda contract address\r\n     */\r\n    function getTandaAddress(uint256 tandaId) external view returns (address) {\r\n        return tandaIdToAddress[tandaId];\r\n    }\r\n\r\n    /**\r\n     * @notice Get all active Tanda IDs\r\n     * @return Array of active Tanda IDs\r\n     */\r\n    function getActiveTandaIds() external view returns (uint256[] memory) {\r\n        uint256 count = 0;\r\n        for (uint256 i = 0; i < nextTandaId; i++) {\r\n            if (activeTandas[i]) {\r\n                count++;\r\n            }\r\n        }\r\n\r\n        uint256[] memory activeIds = new uint256[](count);\r\n        uint256 index = 0;\r\n        for (uint256 i = 0; i < nextTandaId; i++) {\r\n            if (activeTandas[i]) {\r\n                activeIds[index] = i;\r\n                index++;\r\n            }\r\n        }\r\n        return activeIds;\r\n    }\r\n\r\n    /**\r\n     * @notice Get comprehensive Tanda data for frontend display\r\n     * @param tandaId ID of the Tanda\r\n     * @return generalInfo Struct containing general Tanda information\r\n     * @return currentStatus Struct containing current status information\r\n     * @return payoutOrderInfo Array of payout order (if assigned)\r\n     */\r\n    function getTandaData(\r\n        uint256 tandaId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            GeneralInfo memory generalInfo,\r\n            CurrentStatus memory currentStatus,\r\n            uint256[] memory payoutOrderInfo\r\n        )\r\n    {\r\n        address tandaAddress = tandaIdToAddress[tandaId];\r\n        require(tandaAddress != address(0), \"Invalid Tanda ID\");\r\n\r\n        Tanda tanda = Tanda(tandaAddress);\r\n\r\n        // General information (static)\r\n        generalInfo = GeneralInfo({\r\n            tandaId: tandaId,\r\n            contributionAmount: tanda.contributionAmount(),\r\n            payoutInterval: tanda.payoutInterval(),\r\n            participantCount: tanda.participantCount(),\r\n            gracePeriod: tanda.gracePeriod(),\r\n            creator: tanda.creator(),\r\n            usdcTokenAddress: address(tanda.usdcToken()),\r\n            managerAddress: address(tanda.manager()),\r\n            tandaAddress: tandaAddress\r\n        });\r\n\r\n        // Current status (dynamic)\r\n        (\r\n            Tanda.TandaState state,\r\n            uint256 cycle,\r\n            uint256 participantsCount,\r\n            uint256 funds,\r\n            uint256 nextPayout\r\n        ) = tanda.getTandaSummary();\r\n\r\n        currentStatus = CurrentStatus({\r\n            state: state,\r\n            currentCycle: cycle,\r\n            totalParticipants: participantsCount,\r\n            totalFunds: funds,\r\n            nextPayoutTimestamp: nextPayout,\r\n            startTimestamp: tanda.startTimestamp(),\r\n            payoutOrderAssigned: tanda.payoutOrderAssigned(),\r\n            isActive: tanda.state() == Tanda.TandaState.ACTIVE,\r\n            isOpen: tanda.state() == Tanda.TandaState.OPEN,\r\n            isCompleted: tanda.state() == Tanda.TandaState.COMPLETED\r\n        });\r\n\r\n        // Participants information\r\n        Tanda.Participant[] memory participants = tanda.getAllParticipants();\r\n\r\n        // Payout order information (if assigned)\r\n        payoutOrderInfo = tanda.payoutOrderAssigned()\r\n            ? tanda.getPayoutOrder()\r\n            : new uint256[](0);\r\n    }\r\n\r\n    /**\r\n     * @notice Get current VRF configuration\r\n     * @return Current subscription ID\r\n     * @return Current gas lane\r\n     * @return Current callback gas limit\r\n     * @return Current request confirmations\r\n     * @return Current number of words\r\n     * @return Current native payment setting\r\n     */\r\n    function getVRFConfig()\r\n        external\r\n        view\r\n        returns (uint256, bytes32, uint32, uint16, uint32, bool)\r\n    {\r\n        return (\r\n            subscriptionId,\r\n            gasLane,\r\n            callbackGasLimit,\r\n            requestConfirmations,\r\n            numWords,\r\n            nativePayment\r\n        );\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}