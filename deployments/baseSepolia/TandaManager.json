{
  "address": "0x2D8E0A1470bbFeECE27007E152D57146Fd580992",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_usdcAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        }
      ],
      "name": "PayoutOrderAssigned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RandomnessRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tandaAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payoutInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "participantCount",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gracePeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "TandaCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeTandas",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoutInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_participantCount",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_gracePeriod",
          "type": "uint256"
        }
      ],
      "name": "createTanda",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveTandaIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        }
      ],
      "name": "getTandaAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        }
      ],
      "name": "getTandaParameters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "payoutInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "participantCount",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "gracePeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUsdcAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        }
      ],
      "name": "isTandaActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTandaId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tandaId",
          "type": "uint256"
        }
      ],
      "name": "requestRandomnessForTanda",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tandaIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vrfRequestIdToTandaId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ac6517d7d83d83dd9c44f42f20affaee7ac32f93ad4f987466d0bbf2673cbad",
  "receipt": {
    "to": null,
    "from": "0xFb9E902E277432c1897B20da9F2D137cd1E13218",
    "contractAddress": "0x2D8E0A1470bbFeECE27007E152D57146Fd580992",
    "transactionIndex": 17,
    "gasUsed": "3156536",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc907fee7befec3eb0703f5760ab497a36e391114ee7330c05d4b5f3a1119b610",
    "transactionHash": "0x6ac6517d7d83d83dd9c44f42f20affaee7ac32f93ad4f987466d0bbf2673cbad",
    "logs": [],
    "blockNumber": 25588159,
    "cumulativeGasUsed": "7238507",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5C210eF41CD1a72de73bF76eC39637bB0d3d7BEE",
    "17652650031881938556899546254523775603114927968482728430038901064991564696628",
    "0x9e1344a1247c8a1785d0a4681a27152bffdb43666ae5bf7d14d24a5efd44bf71",
    "2500000",
    "0x448951fF62790226fB2adC5f34C5Fe9AF2Eecdf9"
  ],
  "numDeployments": 5,
  "solcInputHash": "95ad279603e67c640993da7a333482c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_usdcAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"}],\"name\":\"PayoutOrderAssigned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tandaAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payoutInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"participantCount\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gracePeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"TandaCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeTandas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_participantCount\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_gracePeriod\",\"type\":\"uint256\"}],\"name\":\"createTanda\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveTandaIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"}],\"name\":\"getTandaAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"}],\"name\":\"getTandaParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"payoutInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"participantCount\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"}],\"name\":\"isTandaActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTandaId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tandaId\",\"type\":\"uint256\"}],\"name\":\"requestRandomnessForTanda\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tandaIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vrfRequestIdToTandaId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createTanda(uint256,uint256,uint16,uint256)\":{\"params\":{\"_contributionAmount\":\"USDC amount each participant must contribute\",\"_gracePeriod\":\"Grace period for late payments in seconds\",\"_participantCount\":\"Number of participants needed\",\"_payoutInterval\":\"Time between payouts in seconds\"},\"returns\":{\"_0\":\"tandaId ID of the newly created Tanda\"}},\"getActiveTandaIds()\":{\"returns\":{\"_0\":\"Array of active Tanda IDs\"}},\"getTandaAddress(uint256)\":{\"params\":{\"tandaId\":\"ID of the Tanda\"},\"returns\":{\"_0\":\"Tanda contract address\"}},\"getTandaParameters(uint256)\":{\"params\":{\"tandaId\":\"ID of the Tanda\"},\"returns\":{\"contributionAmount\":\"USDC contribution amount\",\"gracePeriod\":\"Grace period in seconds\",\"participantCount\":\"Number of participants\",\"payoutInterval\":\"Payout interval in seconds\"}},\"getUsdcAddress()\":{\"returns\":{\"_0\":\"USDC contract address\"}},\"isTandaActive(uint256)\":{\"params\":{\"tandaId\":\"ID of the Tanda to check\"},\"returns\":{\"_0\":\"True if active, false otherwise\"}},\"requestRandomnessForTanda(uint256)\":{\"details\":\"Only callable by Tanda contracts\",\"params\":{\"tandaId\":\"ID of the Tanda requesting randomness\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createTanda(uint256,uint256,uint16,uint256)\":{\"notice\":\"Create a new Tanda\"},\"getActiveTandaIds()\":{\"notice\":\"Get all active Tanda IDs\"},\"getTandaAddress(uint256)\":{\"notice\":\"Get Tanda contract address by ID\"},\"getTandaParameters(uint256)\":{\"notice\":\"Get Tanda creation parameters\"},\"getUsdcAddress()\":{\"notice\":\"Get USDC token address\"},\"isTandaActive(uint256)\":{\"notice\":\"Check if Tanda is active\"},\"requestRandomnessForTanda(uint256)\":{\"notice\":\"Request randomness for payout order assignment\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TandaManager.sol\":\"TandaManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Tanda.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\ninterface ITandaManager {\\r\\n    function requestRandomnessForTanda(uint256 tandaId) external;\\r\\n    function getUsdcAddress() external view returns (address);\\r\\n    function isTandaActive(uint256 tandaId) external view returns (bool);\\r\\n}\\r\\n\\r\\ncontract Tanda is ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    enum TandaState { OPEN, ACTIVE, COMPLETED }\\r\\n\\r\\n    struct Participant {\\r\\n        address payable addr;\\r\\n        bool hasPaid;\\r\\n        uint256 paidUntilCycle;\\r\\n        bool isActive;\\r\\n        uint256 payoutOrder;\\r\\n        uint256 joinTimestamp;\\r\\n    }\\r\\n\\r\\n    uint256 public constant PENALTY_RATE = 15; // 15% penalty for late payments\\r\\n    uint256 public immutable tandaId;\\r\\n    uint256 public immutable contributionAmount;\\r\\n    uint256 public immutable payoutInterval; // in seconds\\r\\n    uint256 public immutable gracePeriod; // in seconds\\r\\n    uint16 public immutable participantCount;\\r\\n    ITandaManager public immutable manager;\\r\\n    IERC20 public immutable usdcToken;\\r\\n    address public immutable creator;\\r\\n\\r\\n    TandaState public state;\\r\\n    uint256 public startTimestamp;\\r\\n    uint256 public currentCycle;\\r\\n    uint256 public totalFunds;\\r\\n    Participant[] public participants;\\r\\n    mapping(address => uint256) public addressToParticipantIndex;\\r\\n\\r\\n    bool public payoutOrderAssigned;\\r\\n    uint256[] public payoutOrder;\\r\\n\\r\\n    event ParticipantJoined(address indexed participant, uint256 timestamp);\\r\\n    event PaymentMade(address indexed participant, uint256 cyclesPaid, uint256 amount, uint256 timestamp);\\r\\n    event PayoutSent(address indexed recipient, uint256 amount, uint256 cycle, uint256 timestamp);\\r\\n    event GracePeriodEntered(address indexed participant, uint256 cycle, uint256 timestamp);\\r\\n    event ParticipantRemoved(address indexed participant, uint256 cycle, uint256 timestamp);\\r\\n    event TandaStarted(uint256 startTimestamp, uint256 initialCycle);\\r\\n    event PayoutOrderAssigned(uint256[] order, uint256 timestamp);\\r\\n    event TandaCompleted(uint256 completionTimestamp);\\r\\n    event TandaRestarted(uint256 restartTimestamp);\\r\\n\\r\\n    modifier onlyManager() {\\r\\n        require(msg.sender == address(manager), \\\"Caller is not manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCreator() {\\r\\n        require(msg.sender == address(creator), \\\"Caller is not creator\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    modifier onlyParticipant() {\\r\\n        require(isParticipant(msg.sender), \\\"Caller is not participant\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyActiveTanda() {\\r\\n        require(state == TandaState.ACTIVE, \\\"Tanda is not active\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOpenTanda() {\\r\\n        require(state == TandaState.OPEN, \\\"Tanda is not open\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyCompletedTanda() {\\r\\n        require(state == TandaState.COMPLETED, \\\"Tanda is not completed\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        uint256 _tandaId,\\r\\n        uint256 _contributionAmount,\\r\\n        uint256 _payoutInterval,\\r\\n        uint16 _participantCount,\\r\\n        uint256 _gracePeriod,\\r\\n        address _manager,\\r\\n        address _creator\\r\\n    ) {\\r\\n        require(_contributionAmount > 0, \\\"Contribution amount must be > 0\\\");\\r\\n        require(_payoutInterval > 0, \\\"Payout interval must be > 0\\\");\\r\\n        require(_participantCount >= 2, \\\"Minimum 2 participants required\\\");\\r\\n        require(_gracePeriod > 0, \\\"Grace period must be > 0\\\");\\r\\n        require(_manager != address(0), \\\"Invalid manager address\\\");\\r\\n        require(_creator != address(0), \\\"Invalid creator address\\\");\\r\\n\\r\\n        tandaId = _tandaId;\\r\\n        contributionAmount = _contributionAmount;\\r\\n        payoutInterval = _payoutInterval;\\r\\n        participantCount = _participantCount;\\r\\n        gracePeriod = _gracePeriod;\\r\\n        manager = ITandaManager(_manager);\\r\\n        usdcToken = IERC20(manager.getUsdcAddress());\\r\\n        state = TandaState.OPEN;\\r\\n        creator = _creator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Join the Tanda by contributing USDC\\r\\n     * @dev Transfers USDC from participant to contract\\r\\n     */\\r\\n    function join() external onlyOpenTanda {\\r\\n        require(participants.length < participantCount, \\\"Tanda is full\\\");\\r\\n        require(!isParticipant(msg.sender), \\\"Already joined this tanda\\\");\\r\\n\\r\\n        // Transfer USDC from participant to contract\\r\\n        usdcToken.safeTransferFrom(msg.sender, address(this), contributionAmount);\\r\\n\\r\\n        participants.push(Participant({\\r\\n            addr: payable(msg.sender),\\r\\n            hasPaid: true,\\r\\n            paidUntilCycle: 1,\\r\\n            isActive: true,\\r\\n            payoutOrder: 0,\\r\\n            joinTimestamp: block.timestamp\\r\\n        }));\\r\\n        addressToParticipantIndex[msg.sender] = participants.length;\\r\\n        totalFunds += contributionAmount;\\r\\n\\r\\n        emit ParticipantJoined(msg.sender, block.timestamp);\\r\\n\\r\\n        if (participants.length == participantCount) {\\r\\n            _startTanda();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Make payment for future cycles\\r\\n     * @param cyclesToPay Number of cycles to pay for\\r\\n     */\\r\\n    function makePayment(uint256 cyclesToPay) external onlyParticipant onlyActiveTanda {\\r\\n        require(state == TandaState.ACTIVE, \\\"Tanda is not active\\\");\\r\\n        require(cyclesToPay > 0, \\\"Must pay for at least 1 cycle\\\");\\r\\n\\r\\n        uint256 participantIndex = addressToParticipantIndex[msg.sender] - 1;\\r\\n        Participant storage participant = participants[participantIndex];\\r\\n        \\r\\n        require(participant.isActive, \\\"Participant is inactive\\\");\\r\\n\\r\\n        // Calculate maximum cycles that can be paid for without overpaying\\r\\n        uint256 maxCyclesCanPay = participantCount - participant.paidUntilCycle + 1;\\r\\n        require(cyclesToPay <= maxCyclesCanPay, \\\"Cannot pay beyond total cycles\\\");\\r\\n\\r\\n        uint256 totalPayment = contributionAmount * cyclesToPay;\\r\\n        usdcToken.safeTransferFrom(msg.sender, address(this), totalPayment);\\r\\n\\r\\n        participant.paidUntilCycle += cyclesToPay;\\r\\n        participant.hasPaid = true;\\r\\n        totalFunds += totalPayment;\\r\\n\\r\\n        emit PaymentMade(msg.sender, cyclesToPay, totalPayment, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Trigger payout for current cycle\\r\\n     * @dev Can be called by anyone when conditions are met\\r\\n     */\\r\\n    function triggerPayout() external nonReentrant onlyActiveTanda {\\r\\n        require(block.timestamp >= startTimestamp + (currentCycle * payoutInterval), \\\"Current cycle not completed\\\");\\r\\n        require(_allParticipantsPaid(), \\\"Not all participants have paid\\\");\\r\\n        require(payoutOrderAssigned, \\\"Payout order not assigned\\\");\\r\\n\\r\\n        uint256 payoutIndex = currentCycle % participantCount;\\r\\n        address payable recipient = participants[payoutOrder[payoutIndex]].addr;\\r\\n        uint256 payoutAmount = contributionAmount * participantCount;\\r\\n\\r\\n        require(usdcToken.balanceOf(address(this)) >= payoutAmount, \\\"Insufficient contract balance\\\");\\r\\n        currentCycle++;\\r\\n        totalFunds -= payoutAmount;\\r\\n\\r\\n        usdcToken.safeTransfer(recipient, payoutAmount);\\r\\n\\r\\n        emit PayoutSent(recipient, payoutAmount, currentCycle - 1, block.timestamp);\\r\\n\\r\\n        if (currentCycle >= participantCount) {\\r\\n            state = TandaState.COMPLETED;\\r\\n            emit TandaCompleted(block.timestamp);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ==================== Manager Functions ====================\\r\\n\\r\\n    function enterGracePeriod(address participant) external onlyCreator onlyActiveTanda {\\r\\n        uint256 participantIndex = addressToParticipantIndex[participant] - 1;\\r\\n        require(participantIndex < participants.length, \\\"Invalid participant\\\");\\r\\n\\r\\n        Participant storage p = participants[participantIndex];\\r\\n        require(p.isActive, \\\"Participant is inactive\\\");\\r\\n        require(!p.hasPaid && p.paidUntilCycle <= currentCycle, \\\"Participant not in default\\\");\\r\\n\\r\\n        emit GracePeriodEntered(participant, currentCycle, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function removeDefaultedParticipant(address participant) external onlyCreator onlyActiveTanda {\\r\\n        uint256 participantIndex = addressToParticipantIndex[participant] - 1;\\r\\n        require(participantIndex < participants.length, \\\"Invalid participant\\\");\\r\\n\\r\\n        Participant storage p = participants[participantIndex];\\r\\n        require(p.isActive, \\\"Participant is inactive\\\");\\r\\n        require(!p.hasPaid && p.paidUntilCycle <= currentCycle, \\\"Participant not in default\\\");\\r\\n\\r\\n        p.isActive = false;\\r\\n        emit ParticipantRemoved(participant, currentCycle, block.timestamp);\\r\\n    }\\r\\n\\r\\n//***\\r\\n    function assignPayoutOrder(uint256 randomSeed) external onlyCreator {\\r\\n        require(!payoutOrderAssigned, \\\"Payout order already assigned\\\");\\r\\n        require(participants.length == participantCount, \\\"Not all participants joined\\\");\\r\\n\\r\\n        payoutOrder = new uint256[](participantCount);\\r\\n        \\r\\n        // Initialize with sequential order\\r\\n        for (uint256 i = 0; i < participantCount; i++) {\\r\\n            payoutOrder[i] = i;\\r\\n        }\\r\\n        \\r\\n        // Fisher-Yates shuffle\\r\\n        for (uint256 i = participantCount - 1; i > 0; i--) {\\r\\n            uint256 j = uint256(keccak256(abi.encode(randomSeed, i))) % (i + 1);\\r\\n            (payoutOrder[i], payoutOrder[j]) = (payoutOrder[j], payoutOrder[i]);\\r\\n        }\\r\\n        \\r\\n        payoutOrderAssigned = true;\\r\\n        emit PayoutOrderAssigned(payoutOrder, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Restart the tanda after completion\\r\\n     * @dev Can only be called by manager after tanda is completed\\r\\n     */\\r\\n    function restartTanda() external onlyCreator onlyCompletedTanda {\\r\\n        // Reset state\\r\\n        state = TandaState.OPEN;\\r\\n        startTimestamp = 0;\\r\\n        currentCycle = 0;\\r\\n        totalFunds = 0;\\r\\n        payoutOrderAssigned = false;\\r\\n        delete payoutOrder;\\r\\n\\r\\n        // Reset participants\\r\\n        for (uint256 i = 0; i < participants.length; i++) {\\r\\n            participants[i].hasPaid = false;\\r\\n            participants[i].paidUntilCycle = 0;\\r\\n            participants[i].isActive = true;\\r\\n            participants[i].payoutOrder = 0;\\r\\n        }\\r\\n\\r\\n        emit TandaRestarted(block.timestamp);\\r\\n    }\\r\\n\\r\\n    // ==================== Internal Functions ====================\\r\\n\\r\\n    function _startTanda() private {\\r\\n        state = TandaState.ACTIVE;\\r\\n        startTimestamp = block.timestamp;\\r\\n        currentCycle = 1;\\r\\n        \\r\\n        emit TandaStarted(startTimestamp, currentCycle);\\r\\n        // manager.requestRandomnessForTanda(tandaId);\\r\\n    }\\r\\n\\r\\n    function _allParticipantsPaid() private view returns (bool) {\\r\\n        for (uint256 i = 0; i < participants.length; i++) {\\r\\n            if (participants[i].isActive && \\r\\n                (participants[i].paidUntilCycle <= currentCycle || !participants[i].hasPaid)) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // ==================== View Functions ====================\\r\\n\\r\\n    /**\\r\\n     * @notice Check if address is a participant\\r\\n     * @param _address Address to check\\r\\n     * @return True if participant, false otherwise\\r\\n     */\\r\\n    function isParticipant(address _address) public view returns (bool) {\\r\\n        return addressToParticipantIndex[_address] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get participant details by address\\r\\n     * @param _address Participant address\\r\\n     * @return Participant struct\\r\\n     */\\r\\n    function getParticipant(address _address) external view returns (Participant memory) {\\r\\n        require(isParticipant(_address), \\\"Address is not participant\\\");\\r\\n        return participants[addressToParticipantIndex[_address] - 1];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get all participants\\r\\n     * @return Array of Participant structs\\r\\n     */\\r\\n    function getAllParticipants() external view returns (Participant[] memory) {\\r\\n        return participants;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get current cycle details\\r\\n     * @return cycleNumber Current cycle number\\r\\n     * @return payoutAddress Address to receive next payout\\r\\n     * @return payoutAmount Amount to be paid out\\r\\n     */\\r\\n    function getCurrentCycleInfo() external view returns (\\r\\n        uint256 cycleNumber,\\r\\n        address payoutAddress,\\r\\n        uint256 payoutAmount\\r\\n    ) {\\r\\n        cycleNumber = currentCycle;\\r\\n        if (payoutOrderAssigned && participants.length > 0) {\\r\\n            uint256 payoutIndex = currentCycle % participantCount;\\r\\n            payoutAddress = participants[payoutOrder[payoutIndex]].addr;\\r\\n            payoutAmount = contributionAmount * participantCount;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get Tanda summary information\\r\\n     * @return state Current Tanda state\\r\\n     * @return currentCycle Current cycle number\\r\\n     * @return participantsCount Number of participants\\r\\n     * @return totalFunds Total USDC in contract\\r\\n     * @return nextPayoutTimestamp Timestamp of next payout\\r\\n     */\\r\\n    function getTandaSummary() external view returns (\\r\\n        TandaState state,\\r\\n        uint256 currentCycle,\\r\\n        uint256 participantsCount,\\r\\n        uint256 totalFunds,\\r\\n        uint256 nextPayoutTimestamp\\r\\n    ) {\\r\\n        state = state;\\r\\n        currentCycle = currentCycle;\\r\\n        participantsCount = participants.length;\\r\\n        totalFunds = totalFunds;\\r\\n        nextPayoutTimestamp = state == TandaState.ACTIVE ? \\r\\n            startTimestamp + (currentCycle * payoutInterval) : 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if participant is in good standing\\r\\n     * @param _address Participant address\\r\\n     * @return True if paid up, false otherwise\\r\\n     */\\r\\n    function isParticipantInGoodStanding(address _address) external view returns (bool) {\\r\\n        if (!isParticipant(_address)) return false;\\r\\n        Participant memory p = participants[addressToParticipantIndex[_address] - 1];\\r\\n        return p.isActive && p.hasPaid && p.paidUntilCycle > currentCycle;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x5d51b174eceb0bb7c7eb9e27663d4c55d9766cf64cbfd16b2c1d1b209001b55a\",\"license\":\"MIT\"},\"contracts/TandaManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./Tanda.sol\\\";\\r\\nimport \\\"./interface/VRFCoordinatorV2_5.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\n\\r\\ncontract TandaManager is VRFConsumerBaseV2 {\\r\\n    VRFCoordinatorV2_5Interface private immutable vrfCoordinator;\\r\\n    uint256 private immutable subscriptionId;\\r\\n    bytes32 private immutable gasLane;\\r\\n    uint32 private immutable callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n    address public immutable usdcAddress;\\r\\n    uint256 public nextTandaId;\\r\\n\\r\\n    mapping(uint256 => address) public tandaIdToAddress;\\r\\n    mapping(uint256 => uint256) public vrfRequestIdToTandaId;\\r\\n    mapping(uint256 => bool) public activeTandas;\\r\\n\\r\\n    event TandaCreated(\\r\\n        uint256 indexed tandaId,\\r\\n        address indexed tandaAddress,\\r\\n        uint256 contributionAmount,\\r\\n        uint256 payoutInterval,\\r\\n        uint16 participantCount,\\r\\n        uint256 gracePeriod,\\r\\n        address creator\\r\\n    );\\r\\n    event RandomnessRequested(uint256 indexed tandaId, uint256 indexed requestId);\\r\\n    event PayoutOrderAssigned(uint256 indexed tandaId);\\r\\n\\r\\n    constructor(\\r\\n        address _vrfCoordinator,\\r\\n        uint256 _subscriptionId,\\r\\n        bytes32 _gasLane,\\r\\n        uint32 _callbackGasLimit,\\r\\n        address _usdcAddress\\r\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\r\\n        require(_vrfCoordinator != address(0), \\\"Invalid VRF coordinator\\\");\\r\\n        require(_usdcAddress != address(0), \\\"Invalid USDC address\\\");\\r\\n\\r\\n        vrfCoordinator = VRFCoordinatorV2_5Interface(_vrfCoordinator);\\r\\n        subscriptionId = _subscriptionId;\\r\\n        gasLane = _gasLane;\\r\\n        callbackGasLimit = _callbackGasLimit;\\r\\n        usdcAddress = _usdcAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Create a new Tanda\\r\\n     * @param _contributionAmount USDC amount each participant must contribute\\r\\n     * @param _payoutInterval Time between payouts in seconds\\r\\n     * @param _participantCount Number of participants needed\\r\\n     * @param _gracePeriod Grace period for late payments in seconds\\r\\n     * @return tandaId ID of the newly created Tanda\\r\\n     */\\r\\n    function createTanda(\\r\\n        uint256 _contributionAmount,\\r\\n        uint256 _payoutInterval,\\r\\n        uint16 _participantCount,\\r\\n        uint256 _gracePeriod\\r\\n    ) external returns (uint256) {\\r\\n        require(_contributionAmount >= 10 * 10**6, \\\"Minimum contribution 10 USDC\\\"); // 10 USDC (6 decimals)\\r\\n        require(_payoutInterval >= 1 days, \\\"Minimum interval 1 day\\\");\\r\\n        require(_payoutInterval <= 30 days, \\\"Maximum interval 30 days\\\");\\r\\n        require(_participantCount >= 2, \\\"Minimum 2 participants\\\");\\r\\n        require(_participantCount <= 50, \\\"Maximum 50 participants\\\");\\r\\n        require(_gracePeriod >= 1 days, \\\"Minimum grace period 1 day\\\");\\r\\n        require(_gracePeriod <= 7 days, \\\"Maximum grace period 7 days\\\");\\r\\n\\r\\n        uint256 tandaId = nextTandaId++;\\r\\n        Tanda tanda = new Tanda(\\r\\n            tandaId,\\r\\n            _contributionAmount,\\r\\n            _payoutInterval,\\r\\n            _participantCount,\\r\\n            _gracePeriod,\\r\\n            address(this),\\r\\n            msg.sender\\r\\n        );\\r\\n        \\r\\n        tandaIdToAddress[tandaId] = address(tanda);\\r\\n        activeTandas[tandaId] = true;\\r\\n\\r\\n        emit TandaCreated(\\r\\n            tandaId,\\r\\n            address(tanda),\\r\\n            _contributionAmount,\\r\\n            _payoutInterval,\\r\\n            _participantCount,\\r\\n            _gracePeriod,\\r\\n            msg.sender\\r\\n        );\\r\\n        return tandaId;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Request randomness for payout order assignment\\r\\n     * @dev Only callable by Tanda contracts\\r\\n     * @param tandaId ID of the Tanda requesting randomness\\r\\n     */\\r\\n    function requestRandomnessForTanda(uint256 tandaId) external {\\r\\n        require(tandaIdToAddress[tandaId] == msg.sender, \\\"Caller is not Tanda\\\");\\r\\n        require(activeTandas[tandaId], \\\"Tanda is not active\\\");\\r\\n\\r\\n        uint256 requestId = vrfCoordinator.requestRandomWords(\\r\\n            gasLane,\\r\\n            subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        vrfRequestIdToTandaId[requestId] = tandaId;\\r\\n\\r\\n        emit RandomnessRequested(tandaId, requestId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Callback function used by VRF Coordinator\\r\\n     * @param requestId ID of the randomness request\\r\\n     * @param randomWords Array of random values\\r\\n     */\\r\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\r\\n        uint256 tandaId = vrfRequestIdToTandaId[requestId];\\r\\n        require(tandaIdToAddress[tandaId] != address(0), \\\"Invalid Tanda ID\\\");\\r\\n\\r\\n        Tanda tanda = Tanda(tandaIdToAddress[tandaId]);\\r\\n        tanda.assignPayoutOrder(randomWords[0]);\\r\\n\\r\\n        emit PayoutOrderAssigned(tandaId);\\r\\n    }\\r\\n\\r\\n    // ==================== View Functions ====================\\r\\n\\r\\n    /**\\r\\n     * @notice Get USDC token address\\r\\n     * @return USDC contract address\\r\\n     */\\r\\n    function getUsdcAddress() external view returns (address) {\\r\\n        return usdcAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Check if Tanda is active\\r\\n     * @param tandaId ID of the Tanda to check\\r\\n     * @return True if active, false otherwise\\r\\n     */\\r\\n    function isTandaActive(uint256 tandaId) external view returns (bool) {\\r\\n        return activeTandas[tandaId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get Tanda contract address by ID\\r\\n     * @param tandaId ID of the Tanda\\r\\n     * @return Tanda contract address\\r\\n     */\\r\\n    function getTandaAddress(uint256 tandaId) external view returns (address) {\\r\\n        return tandaIdToAddress[tandaId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get all active Tanda IDs\\r\\n     * @return Array of active Tanda IDs\\r\\n     */\\r\\n    function getActiveTandaIds() external view returns (uint256[] memory) {\\r\\n        uint256 count = 0;\\r\\n        for (uint256 i = 0; i < nextTandaId; i++) {\\r\\n            if (activeTandas[i]) {\\r\\n                count++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256[] memory activeIds = new uint256[](count);\\r\\n        uint256 index = 0;\\r\\n        for (uint256 i = 0; i < nextTandaId; i++) {\\r\\n            if (activeTandas[i]) {\\r\\n                activeIds[index] = i;\\r\\n                index++;\\r\\n            }\\r\\n        }\\r\\n        return activeIds;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get Tanda creation parameters\\r\\n     * @param tandaId ID of the Tanda\\r\\n     * @return contributionAmount USDC contribution amount\\r\\n     * @return payoutInterval Payout interval in seconds\\r\\n     * @return participantCount Number of participants\\r\\n     * @return gracePeriod Grace period in seconds\\r\\n     */\\r\\n    function getTandaParameters(uint256 tandaId) external view returns (\\r\\n        uint256 contributionAmount,\\r\\n        uint256 payoutInterval,\\r\\n        uint16 participantCount,\\r\\n        uint256 gracePeriod\\r\\n    ) {\\r\\n        address tandaAddress = tandaIdToAddress[tandaId];\\r\\n        require(tandaAddress != address(0), \\\"Invalid Tanda ID\\\");\\r\\n\\r\\n        Tanda tanda = Tanda(tandaAddress);\\r\\n        return (\\r\\n            tanda.contributionAmount(),\\r\\n            tanda.payoutInterval(),\\r\\n            tanda.participantCount(),\\r\\n            tanda.gracePeriod()\\r\\n        );\\r\\n    }\\r\\n}\",\"keccak256\":\"0xea6f71dae33c1b3751e4061b4806b92502a6c73c8b5c67a4b1ddf285f0554693\",\"license\":\"MIT\"},\"contracts/interface/VRFCoordinatorV2_5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\ninterface VRFCoordinatorV2_5Interface {\\r\\n    function requestRandomWords(\\r\\n        bytes32 keyHash,\\r\\n        uint256 subId,\\r\\n        uint16 minimumRequestConfirmations,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint32 numWords\\r\\n    ) external returns (uint256 requestId);\\r\\n}\\r\\n\",\"keccak256\":\"0x25675202b1b5942256b18046d7c8f7551d7d056dec89aaeb965616713a8332f0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61014060405234801561001157600080fd5b5060405162003a3b38038062003a3b83398101604081905261003291610132565b6001600160a01b03851660808190526100925760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642056524620636f6f7264696e61746f7200000000000000000060448201526064015b60405180910390fd5b6001600160a01b0381166100e85760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964205553444320616464726573730000000000000000000000006044820152606401610089565b6001600160a01b0394851660a05260c09390935260e09190915263ffffffff16610100521661012052610194565b80516001600160a01b038116811461012d57600080fd5b919050565b600080600080600060a0868803121561014a57600080fd5b61015386610116565b94506020860151935060408601519250606086015163ffffffff8116811461017a57600080fd5b915061018860808701610116565b90509295509295909350565b60805160a05160c05160e051610100516101205161384a620001f16000396000818160eb01526102a801526000610b1e01526000610ac601526000610aec01526000610b4f0152600081816102ef0152610332015261384a6000f3fe60806040523480156200001157600080fd5b5060043610620000e05760003560e01c80636fa64ffd11620000975780639bb0c0b9116200006e5780639bb0c0b91462000261578063c1a28341146200027a578063dbe0b5b214620002a6578063e7e66ae214620002cd57600080fd5b80636fa64ffd146200021a5780638ce8fb57146200023157806397b509be146200023b57600080fd5b806302d4545714620000e55780631fe543e3146200012a578063235f1e14146200014357806336d1ee12146200017557806338dd814114620001ac5780636a1ea73414620001ee575b600080fd5b6200010d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b620001416200013b36600462000d56565b620002e4565b005b620001666200015436600462000e2c565b60026020526000908152604090205481565b60405190815260200162000121565b6200019b6200018636600462000e2c565b60009081526003602052604090205460ff1690565b604051901515815260200162000121565b620001c3620001bd36600462000e2c565b62000374565b604051620001219493929190938452602084019290925261ffff166040830152606082015260800190565b6200010d620001ff36600462000e2c565b6000908152600160205260409020546001600160a01b031690565b620001666200022b36600462000e5a565b6200057e565b6200016660005481565b6200019b6200024c36600462000e2c565b60036020526000908152604090205460ff1681565b6200026b620008f3565b60405162000121919062000e9c565b6200010d6200028b36600462000e2c565b6001602052600090815260409020546001600160a01b031681565b7f00000000000000000000000000000000000000000000000000000000000000006200010d565b62000141620002de36600462000e2c565b62000a03565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614620003645760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044015b60405180910390fd5b62000370828262000c08565b5050565b6000818152600160205260408120548190819081906001600160a01b031680620003d45760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a590815185b991848125160821b60448201526064016200035b565b6000819050806001600160a01b0316635fa0b65f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000418573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200043e919062000ee2565b816001600160a01b03166309e785e16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200047d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004a3919062000ee2565b826001600160a01b031663362f04c06040518163ffffffff1660e01b8152600401602060405180830381865afa158015620004e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000508919062000efc565b836001600160a01b031663a06db7dc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000547573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200056d919062000ee2565b955095509550955050509193509193565b600062989680851015620005d55760405162461bcd60e51b815260206004820152601c60248201527f4d696e696d756d20636f6e747269627574696f6e20313020555344430000000060448201526064016200035b565b62015180841015620006235760405162461bcd60e51b81526020600482015260166024820152754d696e696d756d20696e74657276616c20312064617960501b60448201526064016200035b565b62278d00841115620006785760405162461bcd60e51b815260206004820152601860248201527f4d6178696d756d20696e74657276616c2033302064617973000000000000000060448201526064016200035b565b60028361ffff161015620006c85760405162461bcd60e51b81526020600482015260166024820152754d696e696d756d2032207061727469636970616e747360501b60448201526064016200035b565b60328361ffff1611156200071f5760405162461bcd60e51b815260206004820152601760248201527f4d6178696d756d203530207061727469636970616e747300000000000000000060448201526064016200035b565b62015180821015620007745760405162461bcd60e51b815260206004820152601a60248201527f4d696e696d756d20677261636520706572696f6420312064617900000000000060448201526064016200035b565b62093a80821115620007c95760405162461bcd60e51b815260206004820152601b60248201527f4d6178696d756d20677261636520706572696f6420372064617973000000000060448201526064016200035b565b600080548180620007da8362000f23565b919050559050600081878787873033604051620007f79062000d32565b9687526020870195909552604086019390935261ffff909116606085015260808401526001600160a01b0390811660a08401521660c082015260e001604051809103906000f08015801562000850573d6000803e3d6000fd5b50600083815260016020818152604080842080546001600160a01b0319166001600160a01b0387169081179091556003835293819020805460ff191690931790925581518b81529081018a905261ffff891691810191909152606081018790523360808201529192509083907f2940fca0fb20f9c88f11423e7bc9b5ad283a937caed7568cb40ab1b736a89e459060a00160405180910390a35095945050505050565b60606000805b600054811015620009415760008181526003602052604090205460ff16156200092c5781620009288162000f23565b9250505b80620009388162000f23565b915050620008f9565b5060008167ffffffffffffffff81111562000960576200096062000d40565b6040519080825280602002602001820160405280156200098a578160200160208202803683370190505b5090506000805b600054811015620009fa5760008181526003602052604090205460ff1615620009e55780838381518110620009ca57620009ca62000f4b565b602090810291909101015281620009e18162000f23565b9250505b80620009f18162000f23565b91505062000991565b50909392505050565b6000818152600160205260409020546001600160a01b0316331462000a615760405162461bcd60e51b815260206004820152601360248201527243616c6c6572206973206e6f742054616e646160681b60448201526064016200035b565b60008181526003602052604090205460ff1662000ab75760405162461bcd60e51b815260206004820152601360248201527254616e6461206973206e6f742061637469766560681b60448201526064016200035b565b60405163d33d44c160e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201527f000000000000000000000000000000000000000000000000000000000000000060248201526003604482015263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166064820152600160848201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d33d44c19060a4016020604051808303816000875af115801562000ba1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bc7919062000ee2565b60008181526002602052604080822085905551919250829184917f3d94fecedaa4f90b8bd459797adb95f5bb11426025c5541390d9ccc1ad1b60a191a35050565b6000828152600260209081526040808320548084526001909252909120546001600160a01b031662000c705760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a590815185b991848125160821b60448201526064016200035b565b60008181526001602052604081205483516001600160a01b0390911691829163c84979f391869162000ca65762000ca662000f4b565b60200260200101516040518263ffffffff1660e01b815260040162000ccd91815260200190565b600060405180830381600087803b15801562000ce857600080fd5b505af115801562000cfd573d6000803e3d6000fd5b50506040518492507f58206d7b6e1a94532dbabfe2fc0e526166ba6025e005b4cb7d2c31248fe4fc9f9150600090a250505050565b6128b38062000f6283390190565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121562000d6a57600080fd5b8235915060208084013567ffffffffffffffff8082111562000d8b57600080fd5b818601915086601f83011262000da057600080fd5b81358181111562000db55762000db562000d40565b8060051b604051601f19603f8301168101818110858211171562000ddd5762000ddd62000d40565b60405291825284820192508381018501918983111562000dfc57600080fd5b938501935b8285101562000e1c5784358452938501939285019262000e01565b8096505050505050509250929050565b60006020828403121562000e3f57600080fd5b5035919050565b61ffff8116811462000e5757600080fd5b50565b6000806000806080858703121562000e7157600080fd5b8435935060208501359250604085013562000e8c8162000e46565b9396929550929360600135925050565b6020808252825182820181905260009190848201906040850190845b8181101562000ed65783518352928401929184019160010162000eb8565b50909695505050505050565b60006020828403121562000ef557600080fd5b5051919050565b60006020828403121562000f0f57600080fd5b815162000f1c8162000e46565b9392505050565b60006001820162000f4457634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fdfe6101806040523480156200001257600080fd5b50604051620028b3380380620028b383398101604081905262000035916200030f565b6001600055856200008d5760405162461bcd60e51b815260206004820152601f60248201527f436f6e747269627574696f6e20616d6f756e74206d757374206265203e20300060448201526064015b60405180910390fd5b60008511620000df5760405162461bcd60e51b815260206004820152601b60248201527f5061796f757420696e74657276616c206d757374206265203e20300000000000604482015260640162000084565b60028461ffff161015620001365760405162461bcd60e51b815260206004820152601f60248201527f4d696e696d756d2032207061727469636970616e747320726571756972656400604482015260640162000084565b60008311620001885760405162461bcd60e51b815260206004820152601860248201527f477261636520706572696f64206d757374206265203e20300000000000000000604482015260640162000084565b6001600160a01b038216620001e05760405162461bcd60e51b815260206004820152601760248201527f496e76616c6964206d616e616765722061646472657373000000000000000000604482015260640162000084565b6001600160a01b038116620002385760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642063726561746f722061646472657373000000000000000000604482015260640162000084565b608087905260a086905260c085905261ffff84166101005260e08390526001600160a01b03821661012081905260408051636df05ad960e11b8152905163dbe0b5b2916004808201926020929091908290030181865afa158015620002a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002c7919062000389565b6001600160a01b03908116610140526001805460ff19169055166101605250620003ae945050505050565b80516001600160a01b03811681146200030a57600080fd5b919050565b600080600080600080600060e0888a0312156200032b57600080fd5b875196506020880151955060408801519450606088015161ffff811681146200035357600080fd5b608089015190945092506200036b60a08901620002f2565b91506200037b60c08901620002f2565b905092959891949750929550565b6000602082840312156200039c57600080fd5b620003a782620002f2565b9392505050565b60805160a05160c05160e051610100516101205161014051610160516123e9620004ca6000396000818161021701528181610ac7015281816112f8015281816114ea0152611a4e0152600081816102d8015281816107b4015281816108a7015281816110f701526118060152600061039a015260008181610360015281816106c50152818161074c0152818161092a01528181610dd401528181610e5a015281816110320152818161173f01528181611a1501528181611ae601528181611b5501528181611bd40152611c3a015260006104ae01526000818161026001526105930152600081816104180152818161076e01528181610e7c015281816110c40152818161182a01526119a7015260006104d501526123e96000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063570c69cd11610104578063a06db7dc116100a2578063bab2f55211610071578063bab2f5521461050c578063c19d93fb14610515578063c84979f31461052f578063e6fd48bc1461054257600080fd5b8063a06db7dc146104a9578063a224388e146104d0578063aaa83e5a146104f7578063b688a3631461050457600080fd5b8063729df2f3116100de578063729df2f31461045a578063924e62531461046d578063929066f514610475578063968ed600146104a057600080fd5b8063570c69cd146103fa5780635fa0b65f146104135780637143059f1461043a57600080fd5b80630e15a1961161017c578063362f04c01161014b578063362f04c01461035b578063481c6a75146103955780634c3b1939146103bc5780635114cb52146103e757600080fd5b80630e15a196146102c057806311eac855146102d3578063195ec9ee146102fa57806335c1d3491461030f57600080fd5b806309e785e1116101b857806309e785e11461025b5780630ad08b86146102825780630b529a171461028a5780630ce014741461029d57600080fd5b806301e2db35146101df57806302d05d3f1461021257806305a95f0414610251575b600080fd5b6101ff6101ed366004612066565b60066020526000908152604090205481565b6040519081526020015b60405180910390f35b6102397f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610209565b61025961054b565b005b6101ff7f000000000000000000000000000000000000000000000000000000000000000081565b6101ff600f81565b6101ff61029836600461208f565b6109a5565b6102b06102ab366004612066565b6109c6565b6040519015158152602001610209565b6102596102ce366004612066565b610abc565b6102397f000000000000000000000000000000000000000000000000000000000000000081565b610302610cab565b60405161020991906120ec565b61032261031d36600461208f565b610d56565b604080516001600160a01b03909716875294151560208701529385019290925215156060840152608083015260a082015260c001610209565b6103827f000000000000000000000000000000000000000000000000000000000000000081565b60405161ffff9091168152602001610209565b6102397f000000000000000000000000000000000000000000000000000000000000000081565b6103c4610db0565b604080519384526001600160a01b03909216602084015290820152606001610209565b6102596103f536600461208f565b610ea9565b6005546040516102099160009182919082908190612172565b6101ff7f000000000000000000000000000000000000000000000000000000000000000081565b61044d610448366004612066565b6111ac565b60405161020991906121a2565b610259610468366004612066565b6112ed565b6102596114df565b6102b0610483366004612066565b6001600160a01b0316600090815260066020526040902054151590565b6101ff60045481565b6101ff7f000000000000000000000000000000000000000000000000000000000000000081565b6101ff7f000000000000000000000000000000000000000000000000000000000000000081565b6007546102b09060ff1681565b6102596116dd565b6101ff60035481565b6001546105229060ff1681565b60405161020991906121b6565b61025961053d36600461208f565b611a43565b6101ff60025481565b610553611d93565b6001805460ff16600281111561056b5761056b61213a565b146105915760405162461bcd60e51b8152600401610588906121c4565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006003546105bf9190612207565b6002546105cc919061221e565b42101561061b5760405162461bcd60e51b815260206004820152601b60248201527f43757272656e74206379636c65206e6f7420636f6d706c6574656400000000006044820152606401610588565b610623611dbd565b61066f5760405162461bcd60e51b815260206004820152601e60248201527f4e6f7420616c6c207061727469636970616e74732068617665207061696400006044820152606401610588565b60075460ff166106c15760405162461bcd60e51b815260206004820152601960248201527f5061796f7574206f72646572206e6f742061737369676e6564000000000000006044820152606401610588565b60007f000000000000000000000000000000000000000000000000000000000000000061ffff166003546106f59190612231565b9050600060056008838154811061070e5761070e612253565b90600052602060002001548154811061072957610729612253565b600091825260208220600590910201546001600160a01b0316915061079261ffff7f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000612207565b6040516370a0823160e01b815230600482015290915081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156107fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081f9190612269565b101561086d5760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152606401610588565b6003805490600061087d83612282565b91905055508060046000828254610894919061229b565b909155506108ce90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383611e83565b816001600160a01b03167f1d2b6cb5f88d674645ff36bd6e4ea583bc3bea7dbb817b193201b90dc9eb4774826001600354610909919061229b565b604080519283526020830191909152429082015260600160405180910390a27f000000000000000000000000000000000000000000000000000000000000000061ffff1660035410610996576001805460ff191660021790556040514281527f7bd139738245a137c3a1097cc5b6e4ab191bc684746c29d16ae43280bda83c539060200160405180910390a15b5050506109a36001600055565b565b600881815481106109b557600080fd5b600091825260209091200154905081565b6001600160a01b0381166000908152600660205260408120546109eb57506000919050565b6001600160a01b038216600090815260066020526040812054600590610a139060019061229b565b81548110610a2357610a23612253565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b038116845260ff600160a01b90910481161515948401949094526001810154918301919091526002810154909216158015606083018190526003840154608084015260049093015460a0830152909250610aa4575080602001515b8015610ab557506003548160400151115b9392505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b045760405162461bcd60e51b8152600401610588906122ae565b6001805460ff166002811115610b1c57610b1c61213a565b14610b395760405162461bcd60e51b8152600401610588906121c4565b6001600160a01b038116600090815260066020526040812054610b5e9060019061229b565b6005549091508110610ba85760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c185c9d1a58da5c185b9d606a1b6044820152606401610588565b600060058281548110610bbd57610bbd612253565b60009182526020909120600590910201600281015490915060ff16610bf45760405162461bcd60e51b8152600401610588906122dd565b8054600160a01b900460ff16158015610c135750600354816001015411155b610c5f5760405162461bcd60e51b815260206004820152601a60248201527f5061727469636970616e74206e6f7420696e2064656661756c740000000000006044820152606401610588565b600354604080519182524260208301526001600160a01b038516917f48f5b31689373177c3a194793297ff1acf95fcc7ea01b17f45109945d754958891015b60405180910390a2505050565b60606005805480602002602001604051908101604052809291908181526020016000905b82821015610d4d5760008481526020908190206040805160c0810182526005860290920180546001600160a01b038116845260ff600160a01b90910481161515848601526001808301549385019390935260028201541615156060840152600381015460808401526004015460a08301529083529092019101610ccf565b50505050905090565b60058181548110610d6657600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0384169550600160a01b90930460ff9081169492939116919086565b600354600754600090819060ff168015610dcb575060055415155b15610ea45760007f000000000000000000000000000000000000000000000000000000000000000061ffff16600354610e049190612231565b9050600560088281548110610e1b57610e1b612253565b906000526020600020015481548110610e3657610e36612253565b60009182526020909120600590910201546001600160a01b03169250610ea061ffff7f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000612207565b9150505b909192565b33600090815260066020526040902054610f055760405162461bcd60e51b815260206004820152601960248201527f43616c6c6572206973206e6f74207061727469636970616e74000000000000006044820152606401610588565b6001805460ff166002811115610f1d57610f1d61213a565b14610f3a5760405162461bcd60e51b8152600401610588906121c4565b6001805460ff166002811115610f5257610f5261213a565b14610f6f5760405162461bcd60e51b8152600401610588906121c4565b60008111610fbf5760405162461bcd60e51b815260206004820152601d60248201527f4d7573742070617920666f72206174206c656173742031206379636c650000006044820152606401610588565b33600090815260066020526040812054610fdb9060019061229b565b9050600060058281548110610ff257610ff2612253565b60009182526020909120600590910201600281015490915060ff166110295760405162461bcd60e51b8152600401610588906122dd565b600081600101547f000000000000000000000000000000000000000000000000000000000000000061ffff1661105f919061229b565b61106a90600161221e565b9050808411156110bc5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420706179206265796f6e6420746f74616c206379636c657300006044820152606401610588565b60006110e8857f0000000000000000000000000000000000000000000000000000000000000000612207565b905061111f6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084611ee7565b84836001016000828254611133919061221e565b9091555050825460ff60a01b1916600160a01b1783556004805482919060009061115e90849061221e565b909155505060408051868152602081018390524281830152905133917f8e4aa0897527f9d5629d6daf3255e753bfdd9862c1b9803c200a8bd12d5b8625919081900360600190a25050505050565b6040805160c08101825260008082526020808301829052828401829052606083018290526080830182905260a083018290526001600160a01b038516825260069052919091205461123f5760405162461bcd60e51b815260206004820152601a60248201527f41646472657373206973206e6f74207061727469636970616e740000000000006044820152606401610588565b6001600160a01b0382166000908152600660205260409020546005906112679060019061229b565b8154811061127757611277612253565b60009182526020918290206040805160c081018252600590930290910180546001600160a01b038116845260ff600160a01b90910481161515948401949094526001810154918301919091526002810154909216151560608201526003820154608082015260049091015460a082015292915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113355760405162461bcd60e51b8152600401610588906122ae565b6001805460ff16600281111561134d5761134d61213a565b1461136a5760405162461bcd60e51b8152600401610588906121c4565b6001600160a01b03811660009081526006602052604081205461138f9060019061229b565b60055490915081106113d95760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c185c9d1a58da5c185b9d606a1b6044820152606401610588565b6000600582815481106113ee576113ee612253565b60009182526020909120600590910201600281015490915060ff166114255760405162461bcd60e51b8152600401610588906122dd565b8054600160a01b900460ff161580156114445750600354816001015411155b6114905760405162461bcd60e51b815260206004820152601a60248201527f5061727469636970616e74206e6f7420696e2064656661756c740000000000006044820152606401610588565b60028101805460ff19169055600354604080519182524260208301526001600160a01b038516917f7e4798a8032598c7051889ed361360d7a9014ad9a23db8378c2984bbc5cc4f0a9101610c9e565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115275760405162461bcd60e51b8152600401610588906122ae565b600260015460ff1660028111156115405761154061213a565b146115865760405162461bcd60e51b815260206004820152601660248201527515185b9918481a5cc81b9bdd0818dbdb5c1b195d195960521b6044820152606401610588565b6001805460ff199081169091556000600281905560038190556004819055600780549092169091556115ba90600890611fe5565b60005b6005548110156116a6576000600582815481106115dc576115dc612253565b906000526020600020906005020160000160146101000a81548160ff02191690831515021790555060006005828154811061161957611619612253565b90600052602060002090600502016001018190555060016005828154811061164357611643612253565b906000526020600020906005020160020160006101000a81548160ff02191690831515021790555060006005828154811061168057611680612253565b60009182526020909120600360059092020101558061169e81612282565b9150506115bd565b506040514281527fd3ebc31f8a361237f62eadb2eebe3af4a3ec578b0ccb724fe48f76c607f3000d906020015b60405180910390a1565b600060015460ff1660028111156116f6576116f661213a565b146117375760405162461bcd60e51b81526020600482015260116024820152702a30b732309034b9903737ba1037b832b760791b6044820152606401610588565b60055461ffff7f0000000000000000000000000000000000000000000000000000000000000000161161179c5760405162461bcd60e51b815260206004820152600d60248201526c15185b9918481a5cc8199d5b1b609a1b6044820152606401610588565b33600090815260066020526040902054156117f95760405162461bcd60e51b815260206004820152601960248201527f416c7265616479206a6f696e656420746869732074616e6461000000000000006044820152606401610588565b61184e6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633307f0000000000000000000000000000000000000000000000000000000000000000611ee7565b6040805160c0810182523380825260016020808401828152848601838152606086018481526000608088018181524260a08a019081526005805498890181558084529951978a027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08101805497511515600160a01b026001600160a81b03199098166001600160a01b039a909a16999099179690961790975592517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db185015590517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db28401805491151560ff1990921691909117905590517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db383015592517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db4909101559254918152600690925291812091909155600480547f000000000000000000000000000000000000000000000000000000000000000092906119d390849061221e565b909155505060405142815233907f8123641a38ad3476ac345fc38496fa9edc26a110698c8c0c9fffc30f546f918c9060200160405180910390a260055461ffff7f00000000000000000000000000000000000000000000000000000000000000001690036109a3576109a3611f26565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a8b5760405162461bcd60e51b8152600401610588906122ae565b60075460ff1615611ade5760405162461bcd60e51b815260206004820152601d60248201527f5061796f7574206f7264657220616c72656164792061737369676e65640000006044820152606401610588565b60055461ffff7f00000000000000000000000000000000000000000000000000000000000000001614611b535760405162461bcd60e51b815260206004820152601b60248201527f4e6f7420616c6c207061727469636970616e7473206a6f696e656400000000006044820152606401610588565b7f000000000000000000000000000000000000000000000000000000000000000061ffff1667ffffffffffffffff811115611b9057611b90612314565b604051908082528060200260200182016040528015611bb9578160200160208202803683370190505b508051611bce91600891602090910190612006565b5060005b7f000000000000000000000000000000000000000000000000000000000000000061ffff16811015611c30578060088281548110611c1257611c12612253565b60009182526020909120015580611c2881612282565b915050611bd2565b506000611c5e60017f000000000000000000000000000000000000000000000000000000000000000061232a565b61ffff1690505b8015611d47576000611c7882600161221e565b60408051602081018690529081018490526060016040516020818303038152906040528051906020012060001c611caf9190612231565b905060088181548110611cc457611cc4612253565b906000526020600020015460088381548110611ce257611ce2612253565b906000526020600020015460088481548110611d0057611d00612253565b90600052602060002001600060088581548110611d1f57611d1f612253565b6000918252602090912001929092559190915550819050611d3f8161234c565b915050611c65565b506007805460ff191660011790556040517f971012af51546161130452a244c133ec24b1cde244ef6ac75b42efc886a43ada90611d88906008904290612363565b60405180910390a150565b600260005403611db657604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6000805b600554811015611e7b5760058181548110611dde57611dde612253565b600091825260209091206002600590920201015460ff168015611e5c575060035460058281548110611e1257611e12612253565b906000526020600020906005020160010154111580611e5c575060058181548110611e3f57611e3f612253565b6000918252602090912060059091020154600160a01b900460ff16155b15611e6957600091505090565b80611e7381612282565b915050611dc1565b506001905090565b6040516001600160a01b03838116602483015260448201839052611ee291859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050611f74565b505050565b6040516001600160a01b038481166024830152838116604483015260648201839052611f209186918216906323b872dd90608401611eb0565b50505050565b6001805460ff19168117815542600281905560038290556040805191825260208201929092527faed8f846008894a9b50aafe48b33af7084702a26f52921bbf1f5aa5dfbb09aa491016116d3565b600080602060008451602086016000885af180611f97576040513d6000823e3d81fd5b50506000513d91508115611faf578060011415611fbc565b6001600160a01b0384163b155b15611f2057604051635274afe760e01b81526001600160a01b0385166004820152602401610588565b50805460008255906000526020600020908101906120039190612051565b50565b828054828255906000526020600020908101928215612041579160200282015b82811115612041578251825591602001919060010190612026565b5061204d929150612051565b5090565b5b8082111561204d5760008155600101612052565b60006020828403121561207857600080fd5b81356001600160a01b0381168114610ab557600080fd5b6000602082840312156120a157600080fd5b5035919050565b80516001600160a01b03168252602080820151151590830152604080820151908301526060808201511515908301526080808201519083015260a090810151910152565b6020808252825182820181905260009190848201906040850190845b8181101561212e5761211b8385516120a8565b9284019260c09290920191600101612108565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b6003811061216e57634e487b7160e01b600052602160045260246000fd5b9052565b60a081016121808288612150565b8560208301528460408301528360608301528260808301529695505050505050565b60c081016121b082846120a8565b92915050565b602081016121b08284612150565b60208082526013908201527254616e6461206973206e6f742061637469766560681b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176121b0576121b06121f1565b808201808211156121b0576121b06121f1565b60008261224e57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561227b57600080fd5b5051919050565b600060018201612294576122946121f1565b5060010190565b818103818111156121b0576121b06121f1565b60208082526015908201527421b0b63632b91034b9903737ba1031b932b0ba37b960591b604082015260600190565b60208082526017908201527f5061727469636970616e7420697320696e616374697665000000000000000000604082015260600190565b634e487b7160e01b600052604160045260246000fd5b61ffff828116828216039080821115612345576123456121f1565b5092915050565b60008161235b5761235b6121f1565b506000190190565b6000604082016040835280855480835260608501915086600052602092508260002060005b828110156123a457815484529284019260019182019101612388565b5050509201929092529291505056fea264697066735822122070ac7c25c9d832c4dade2f32ee04a9b23749e48c79dcd224a27186c5076bdbfb64736f6c63430008140033a26469706673582212200a0c95576f270b441dd7d414ff509213c8afa73c03e81abcc4b8225ff4e18b5264736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createTanda(uint256,uint256,uint16,uint256)": {
        "params": {
          "_contributionAmount": "USDC amount each participant must contribute",
          "_gracePeriod": "Grace period for late payments in seconds",
          "_participantCount": "Number of participants needed",
          "_payoutInterval": "Time between payouts in seconds"
        },
        "returns": {
          "_0": "tandaId ID of the newly created Tanda"
        }
      },
      "getActiveTandaIds()": {
        "returns": {
          "_0": "Array of active Tanda IDs"
        }
      },
      "getTandaAddress(uint256)": {
        "params": {
          "tandaId": "ID of the Tanda"
        },
        "returns": {
          "_0": "Tanda contract address"
        }
      },
      "getTandaParameters(uint256)": {
        "params": {
          "tandaId": "ID of the Tanda"
        },
        "returns": {
          "contributionAmount": "USDC contribution amount",
          "gracePeriod": "Grace period in seconds",
          "participantCount": "Number of participants",
          "payoutInterval": "Payout interval in seconds"
        }
      },
      "getUsdcAddress()": {
        "returns": {
          "_0": "USDC contract address"
        }
      },
      "isTandaActive(uint256)": {
        "params": {
          "tandaId": "ID of the Tanda to check"
        },
        "returns": {
          "_0": "True if active, false otherwise"
        }
      },
      "requestRandomnessForTanda(uint256)": {
        "details": "Only callable by Tanda contracts",
        "params": {
          "tandaId": "ID of the Tanda requesting randomness"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createTanda(uint256,uint256,uint16,uint256)": {
        "notice": "Create a new Tanda"
      },
      "getActiveTandaIds()": {
        "notice": "Get all active Tanda IDs"
      },
      "getTandaAddress(uint256)": {
        "notice": "Get Tanda contract address by ID"
      },
      "getTandaParameters(uint256)": {
        "notice": "Get Tanda creation parameters"
      },
      "getUsdcAddress()": {
        "notice": "Get USDC token address"
      },
      "isTandaActive(uint256)": {
        "notice": "Check if Tanda is active"
      },
      "requestRandomnessForTanda(uint256)": {
        "notice": "Request randomness for payout order assignment"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1985,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "nextTandaId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1989,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "tandaIdToAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1993,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "vrfRequestIdToTandaId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1997,
        "contract": "contracts/TandaManager.sol:TandaManager",
        "label": "activeTandas",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}